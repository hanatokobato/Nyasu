/* tslint:disable */
/* eslint-disable */
/**
 * nyasu
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Card
 */
export interface Card {
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'deck_id'?: string;
    /**
     * 
     * @type {CardContent}
     * @memberof Card
     */
    'content'?: CardContent;
    /**
     * 
     * @type {CardFields}
     * @memberof Card
     */
    'fields'?: CardFields;
    /**
     * 
     * @type {string}
     * @memberof Card
     */
    'audioUrl'?: string;
}
/**
 * 
 * @export
 * @interface CardContent
 */
export interface CardContent {
    /**
     * 
     * @type {string}
     * @memberof CardContent
     */
    'front'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardContent
     */
    'back'?: string;
}
/**
 * 
 * @export
 * @interface CardFields
 */
export interface CardFields {
    /**
     * 
     * @type {string}
     * @memberof CardFields
     */
    'word'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardFields
     */
    'translate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardFields
     */
    'spelling'?: string;
    /**
     * 
     * @type {CardFieldsExample}
     * @memberof CardFields
     */
    'example'?: CardFieldsExample;
}
/**
 * 
 * @export
 * @interface CardFieldsExample
 */
export interface CardFieldsExample {
    /**
     * 
     * @type {string}
     * @memberof CardFieldsExample
     */
    'sentence'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardFieldsExample
     */
    'translate'?: string;
}
/**
 * 
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     * Unique identifier for the given user.
     * @type {number}
     * @memberof CurrentUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentUser
     */
    'role': CurrentUserRoleEnum;
}

export const CurrentUserRoleEnum = {
    Admin: 'ADMIN',
    User: 'USER'
} as const;

export type CurrentUserRoleEnum = typeof CurrentUserRoleEnum[keyof typeof CurrentUserRoleEnum];

/**
 * 
 * @export
 * @interface DeckDetail
 */
export interface DeckDetail {
    /**
     * 
     * @type {string}
     * @memberof DeckDetail
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeckDetail
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeckDetail
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface DeckListItem
 */
export interface DeckListItem {
    /**
     * 
     * @type {string}
     * @memberof DeckListItem
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeckListItem
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DeckListItem
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface DeleteApiV1AuthLogout200Response
 */
export interface DeleteApiV1AuthLogout200Response {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteApiV1AuthLogout200Response
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface GetApiV1AuthUser200Response
 */
export interface GetApiV1AuthUser200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetApiV1AuthUser200Response
     */
    'success': boolean;
    /**
     * 
     * @type {GetApiV1AuthUser200ResponseData}
     * @memberof GetApiV1AuthUser200Response
     */
    'data': GetApiV1AuthUser200ResponseData;
}
/**
 * 
 * @export
 * @interface GetApiV1AuthUser200ResponseData
 */
export interface GetApiV1AuthUser200ResponseData {
    /**
     * 
     * @type {CurrentUser}
     * @memberof GetApiV1AuthUser200ResponseData
     */
    'user': CurrentUser;
}
/**
 * 
 * @export
 * @interface GetApiV1AuthUser401Response
 */
export interface GetApiV1AuthUser401Response {
    /**
     * 
     * @type {string}
     * @memberof GetApiV1AuthUser401Response
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface GetApiV1AuthUser401Response1
 */
export interface GetApiV1AuthUser401Response1 {
    /**
     * 
     * @type {boolean}
     * @memberof GetApiV1AuthUser401Response1
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<any>}
     * @memberof GetApiV1AuthUser401Response1
     */
    'errors'?: Array<any>;
}
/**
 * 
 * @export
 * @interface GetApiV1Cards200Response
 */
export interface GetApiV1Cards200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetApiV1Cards200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {GetApiV1Cards200ResponseData}
     * @memberof GetApiV1Cards200Response
     */
    'data'?: GetApiV1Cards200ResponseData;
}
/**
 * 
 * @export
 * @interface GetApiV1Cards200ResponseData
 */
export interface GetApiV1Cards200ResponseData {
    /**
     * 
     * @type {Array<Card>}
     * @memberof GetApiV1Cards200ResponseData
     */
    'cards'?: Array<Card>;
    /**
     * 
     * @type {number}
     * @memberof GetApiV1Cards200ResponseData
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetApiV1Cards200ResponseData
     */
    'total_page'?: number;
}
/**
 * 
 * @export
 * @interface GetApiV1CardsLearning200Response
 */
export interface GetApiV1CardsLearning200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetApiV1CardsLearning200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {GetApiV1CardsLearning200ResponseData}
     * @memberof GetApiV1CardsLearning200Response
     */
    'data'?: GetApiV1CardsLearning200ResponseData;
}
/**
 * 
 * @export
 * @interface GetApiV1CardsLearning200ResponseData
 */
export interface GetApiV1CardsLearning200ResponseData {
    /**
     * 
     * @type {Array<Card>}
     * @memberof GetApiV1CardsLearning200ResponseData
     */
    'cards'?: Array<Card>;
}
/**
 * 
 * @export
 * @interface GetApiV1CardsRandom200Response
 */
export interface GetApiV1CardsRandom200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetApiV1CardsRandom200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {GetApiV1CardsRandom200ResponseData}
     * @memberof GetApiV1CardsRandom200Response
     */
    'data'?: GetApiV1CardsRandom200ResponseData;
}
/**
 * 
 * @export
 * @interface GetApiV1CardsRandom200ResponseData
 */
export interface GetApiV1CardsRandom200ResponseData {
    /**
     * 
     * @type {Array<Card>}
     * @memberof GetApiV1CardsRandom200ResponseData
     */
    'cards'?: Array<Card>;
}
/**
 * 
 * @export
 * @interface GetApiV1Decks200Response
 */
export interface GetApiV1Decks200Response {
    /**
     * 
     * @type {boolean}
     * @memberof GetApiV1Decks200Response
     */
    'success': boolean;
    /**
     * 
     * @type {GetApiV1Decks200ResponseData}
     * @memberof GetApiV1Decks200Response
     */
    'data': GetApiV1Decks200ResponseData;
}
/**
 * 
 * @export
 * @interface GetApiV1Decks200ResponseData
 */
export interface GetApiV1Decks200ResponseData {
    /**
     * 
     * @type {Array<DeckListItem>}
     * @memberof GetApiV1Decks200ResponseData
     */
    'decks': Array<DeckListItem>;
    /**
     * 
     * @type {number}
     * @memberof GetApiV1Decks200ResponseData
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof GetApiV1Decks200ResponseData
     */
    'total_page': number;
}
/**
 * 
 * @export
 * @interface PostApiV1AuthLoginRequest
 */
export interface PostApiV1AuthLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiV1AuthLoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV1AuthLoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PostApiV1AuthSignup200Response
 */
export interface PostApiV1AuthSignup200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostApiV1AuthSignup200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof PostApiV1AuthSignup200Response
     */
    'token': string;
    /**
     * 
     * @type {PostApiV1AuthSignup200ResponseData}
     * @memberof PostApiV1AuthSignup200Response
     */
    'data': PostApiV1AuthSignup200ResponseData;
}
/**
 * 
 * @export
 * @interface PostApiV1AuthSignup200ResponseData
 */
export interface PostApiV1AuthSignup200ResponseData {
    /**
     * 
     * @type {CurrentUser}
     * @memberof PostApiV1AuthSignup200ResponseData
     */
    'user': CurrentUser;
}
/**
 * 
 * @export
 * @interface PostApiV1AuthSignupRequest
 */
export interface PostApiV1AuthSignupRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiV1AuthSignupRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV1AuthSignupRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV1AuthSignupRequest
     */
    'password_confirm': string;
}
/**
 * 
 * @export
 * @interface PostApiV1Cards201Response
 */
export interface PostApiV1Cards201Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostApiV1Cards201Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {PostApiV1Cards201ResponseData}
     * @memberof PostApiV1Cards201Response
     */
    'data'?: PostApiV1Cards201ResponseData;
}
/**
 * 
 * @export
 * @interface PostApiV1Cards201ResponseData
 */
export interface PostApiV1Cards201ResponseData {
    /**
     * 
     * @type {Card}
     * @memberof PostApiV1Cards201ResponseData
     */
    'card'?: Card;
}
/**
 * 
 * @export
 * @interface PostApiV1CardsAttachments201Response
 */
export interface PostApiV1CardsAttachments201Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostApiV1CardsAttachments201Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {PostApiV1CardsAttachments201ResponseData}
     * @memberof PostApiV1CardsAttachments201Response
     */
    'data'?: PostApiV1CardsAttachments201ResponseData;
}
/**
 * 
 * @export
 * @interface PostApiV1CardsAttachments201ResponseData
 */
export interface PostApiV1CardsAttachments201ResponseData {
    /**
     * 
     * @type {PostApiV1CardsAttachments201ResponseDataAttachment}
     * @memberof PostApiV1CardsAttachments201ResponseData
     */
    'attachment'?: PostApiV1CardsAttachments201ResponseDataAttachment;
}
/**
 * 
 * @export
 * @interface PostApiV1CardsAttachments201ResponseDataAttachment
 */
export interface PostApiV1CardsAttachments201ResponseDataAttachment {
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsAttachments201ResponseDataAttachment
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsAttachments201ResponseDataAttachment
     */
    'path'?: string;
}
/**
 * 
 * @export
 * @interface PostApiV1CardsLearning200Response
 */
export interface PostApiV1CardsLearning200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostApiV1CardsLearning200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof PostApiV1CardsLearning200Response
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface PostApiV1CardsLearningRequest
 */
export interface PostApiV1CardsLearningRequest {
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsLearningRequest
     */
    'card_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsLearningRequest
     */
    'deck_id'?: string;
}
/**
 * 
 * @export
 * @interface PostApiV1CardsRequestContent
 */
export interface PostApiV1CardsRequestContent {
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsRequestContent
     */
    'front'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsRequestContent
     */
    'back'?: string;
}
/**
 * 
 * @export
 * @interface PostApiV1CardsRequestFields
 */
export interface PostApiV1CardsRequestFields {
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsRequestFields
     */
    'word'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsRequestFields
     */
    'translate'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsRequestFields
     */
    'spelling'?: string;
    /**
     * 
     * @type {PostApiV1CardsRequestFieldsExample}
     * @memberof PostApiV1CardsRequestFields
     */
    'example'?: PostApiV1CardsRequestFieldsExample;
}
/**
 * 
 * @export
 * @interface PostApiV1CardsRequestFieldsExample
 */
export interface PostApiV1CardsRequestFieldsExample {
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsRequestFieldsExample
     */
    'sentence'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostApiV1CardsRequestFieldsExample
     */
    'translate'?: string;
}
/**
 * 
 * @export
 * @interface PostApiV1Decks200Response
 */
export interface PostApiV1Decks200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PostApiV1Decks200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {PostApiV1Decks200ResponseData}
     * @memberof PostApiV1Decks200Response
     */
    'data'?: PostApiV1Decks200ResponseData;
}
/**
 * 
 * @export
 * @interface PostApiV1Decks200ResponseData
 */
export interface PostApiV1Decks200ResponseData {
    /**
     * 
     * @type {DeckDetail}
     * @memberof PostApiV1Decks200ResponseData
     */
    'deck'?: DeckDetail;
}
/**
 * 
 * @export
 * @interface PutApiV1CardsIdRequestContent
 */
export interface PutApiV1CardsIdRequestContent {
    /**
     * 
     * @type {string}
     * @memberof PutApiV1CardsIdRequestContent
     */
    'front'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutApiV1CardsIdRequestContent
     */
    'back'?: string;
}
/**
 * 
 * @export
 * @interface PutApiV1CardsIdRequestFields
 */
export interface PutApiV1CardsIdRequestFields {
    /**
     * 
     * @type {string}
     * @memberof PutApiV1CardsIdRequestFields
     */
    'word'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutApiV1CardsIdRequestFields
     */
    'translate'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutApiV1CardsIdRequestFields
     */
    'spelling'?: string;
    /**
     * 
     * @type {PutApiV1CardsIdRequestFieldsExample}
     * @memberof PutApiV1CardsIdRequestFields
     */
    'example'?: PutApiV1CardsIdRequestFieldsExample;
}
/**
 * 
 * @export
 * @interface PutApiV1CardsIdRequestFieldsExample
 */
export interface PutApiV1CardsIdRequestFieldsExample {
    /**
     * 
     * @type {string}
     * @memberof PutApiV1CardsIdRequestFieldsExample
     */
    'sentence'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutApiV1CardsIdRequestFieldsExample
     */
    'translate'?: string;
}
/**
 * 
 * @export
 * @interface PutApiV1CardsLearning200Response
 */
export interface PutApiV1CardsLearning200Response {
    /**
     * 
     * @type {boolean}
     * @memberof PutApiV1CardsLearning200Response
     */
    'success'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof PutApiV1CardsLearning200Response
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface PutApiV1CardsLearningRequest
 */
export interface PutApiV1CardsLearningRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof PutApiV1CardsLearningRequest
     */
    'passed_cards'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PutApiV1CardsLearningRequest
     */
    'failed_cards'?: Array<string>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1AuthLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete card
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1CardsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteApiV1CardsId', 'id', id)
            const localVarPath = `/api/v1/cards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete deck
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1DecksId: async (id: string, body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteApiV1DecksId', 'id', id)
            const localVarPath = `/api/v1/decks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1AuthUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get cards list
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1Cards: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Card detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiV1CardsId', 'id', id)
            const localVarPath = `/api/v1/cards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get learning cards
         * @param {string} [deckId] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsLearning: async (deckId?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/learnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (deckId !== undefined) {
                localVarQueryParameter['deck_id'] = deckId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get random cards
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsRandom: async (limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cards/random`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List decks of current user
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1Decks: async (page?: number, perPage?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/decks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get deck
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1DecksId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getApiV1DecksId', 'id', id)
            const localVarPath = `/api/v1/decks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get reviewing cards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1LearningsReviews: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/learnings/reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {PostApiV1AuthLoginRequest} [postApiV1AuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1AuthLogin: async (postApiV1AuthLoginRequest?: PostApiV1AuthLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiV1AuthLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register new user
         * @param {PostApiV1AuthSignupRequest} [postApiV1AuthSignupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1AuthSignup: async (postApiV1AuthSignupRequest?: PostApiV1AuthSignupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiV1AuthSignupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create card
         * @param {string} [deckId] 
         * @param {PostApiV1CardsRequestContent} [content] 
         * @param {PostApiV1CardsRequestFields} [fields] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Cards: async (deckId?: string, content?: PostApiV1CardsRequestContent, fields?: PostApiV1CardsRequestFields, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (deckId !== undefined) { 
                localVarFormParams.append('deck_id', deckId as any);
            }
    
            if (content !== undefined) { 
                localVarFormParams.append('content', new Blob([JSON.stringify(content)], { type: "application/json", }));
            }
    
            if (fields !== undefined) { 
                localVarFormParams.append('fields', new Blob([JSON.stringify(fields)], { type: "application/json", }));
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload card photo
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1CardsAttachments: async (file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/cards/attachments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add learning
         * @param {PostApiV1CardsLearningRequest} [postApiV1CardsLearningRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1CardsLearning: async (postApiV1CardsLearningRequest?: PostApiV1CardsLearningRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/learnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postApiV1CardsLearningRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create deck
         * @param {string} name 
         * @param {string} [description] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Decks: async (name: string, description?: string, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('postApiV1Decks', 'name', name)
            const localVarPath = `/api/v1/decks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update card
         * @param {string} id 
         * @param {PutApiV1CardsIdRequestContent} [content] 
         * @param {PutApiV1CardsIdRequestFields} [fields] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1CardsId: async (id: string, content?: PutApiV1CardsIdRequestContent, fields?: PutApiV1CardsIdRequestFields, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putApiV1CardsId', 'id', id)
            const localVarPath = `/api/v1/cards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (content !== undefined) { 
                localVarFormParams.append('content', new Blob([JSON.stringify(content)], { type: "application/json", }));
            }
    
            if (fields !== undefined) { 
                localVarFormParams.append('fields', new Blob([JSON.stringify(fields)], { type: "application/json", }));
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update learnings
         * @param {PutApiV1CardsLearningRequest} [putApiV1CardsLearningRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1CardsLearning: async (putApiV1CardsLearningRequest?: PutApiV1CardsLearningRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/learnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putApiV1CardsLearningRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update deck
         * @param {string} id 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1DecksId: async (id: string, name?: string, description?: string, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putApiV1DecksId', 'id', id)
            const localVarPath = `/api/v1/decks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1AuthLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteApiV1AuthLogout200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1AuthLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete card
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1CardsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteApiV1AuthLogout200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1CardsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete deck
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiV1DecksId(id: string, body?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteApiV1AuthLogout200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiV1DecksId(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1AuthUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1AuthUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1AuthUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get cards list
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1Cards(page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1Cards200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1Cards(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Card detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1AuthUser401Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get learning cards
         * @param {string} [deckId] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsLearning(deckId?: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1AuthUser401Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsLearning(deckId, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get random cards
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1CardsRandom(limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1CardsRandom200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1CardsRandom(limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List decks of current user
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1Decks(page?: number, perPage?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1Decks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1Decks(page, perPage, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get deck
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1DecksId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiV1Decks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1DecksId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get reviewing cards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiV1LearningsReviews(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1Cards200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiV1LearningsReviews(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {PostApiV1AuthLoginRequest} [postApiV1AuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1AuthLogin(postApiV1AuthLoginRequest?: PostApiV1AuthLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1AuthUser401Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1AuthLogin(postApiV1AuthLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register new user
         * @param {PostApiV1AuthSignupRequest} [postApiV1AuthSignupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1AuthSignup(postApiV1AuthSignupRequest?: PostApiV1AuthSignupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1AuthUser401Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1AuthSignup(postApiV1AuthSignupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create card
         * @param {string} [deckId] 
         * @param {PostApiV1CardsRequestContent} [content] 
         * @param {PostApiV1CardsRequestFields} [fields] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1Cards(deckId?: string, content?: PostApiV1CardsRequestContent, fields?: PostApiV1CardsRequestFields, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1AuthUser401Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1Cards(deckId, content, fields, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload card photo
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1CardsAttachments(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1AuthUser401Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1CardsAttachments(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add learning
         * @param {PostApiV1CardsLearningRequest} [postApiV1CardsLearningRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1CardsLearning(postApiV1CardsLearningRequest?: PostApiV1CardsLearningRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiV1CardsLearning200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1CardsLearning(postApiV1CardsLearningRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create deck
         * @param {string} name 
         * @param {string} [description] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiV1Decks(name: string, description?: string, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiV1Decks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postApiV1Decks(name, description, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update card
         * @param {string} id 
         * @param {PutApiV1CardsIdRequestContent} [content] 
         * @param {PutApiV1CardsIdRequestFields} [fields] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1CardsId(id: string, content?: PutApiV1CardsIdRequestContent, fields?: PutApiV1CardsIdRequestFields, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetApiV1AuthUser401Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1CardsId(id, content, fields, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update learnings
         * @param {PutApiV1CardsLearningRequest} [putApiV1CardsLearningRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1CardsLearning(putApiV1CardsLearningRequest?: PutApiV1CardsLearningRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutApiV1CardsLearning200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1CardsLearning(putApiV1CardsLearningRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update deck
         * @param {string} id 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiV1DecksId(id: string, name?: string, description?: string, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostApiV1Decks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putApiV1DecksId(id, name, description, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1AuthLogout(options?: any): AxiosPromise<DeleteApiV1AuthLogout200Response> {
            return localVarFp.deleteApiV1AuthLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete card
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1CardsId(id: string, options?: any): AxiosPromise<DeleteApiV1AuthLogout200Response> {
            return localVarFp.deleteApiV1CardsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete deck
         * @param {string} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiV1DecksId(id: string, body?: object, options?: any): AxiosPromise<DeleteApiV1AuthLogout200Response> {
            return localVarFp.deleteApiV1DecksId(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1AuthUser(options?: any): AxiosPromise<GetApiV1AuthUser200Response> {
            return localVarFp.getApiV1AuthUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get cards list
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1Cards(page?: number, perPage?: number, options?: any): AxiosPromise<GetApiV1Cards200Response> {
            return localVarFp.getApiV1Cards(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Card detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsId(id: string, options?: any): AxiosPromise<GetApiV1AuthUser401Response> {
            return localVarFp.getApiV1CardsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get learning cards
         * @param {string} [deckId] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsLearning(deckId?: string, limit?: number, options?: any): AxiosPromise<GetApiV1AuthUser401Response> {
            return localVarFp.getApiV1CardsLearning(deckId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get random cards
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1CardsRandom(limit?: number, options?: any): AxiosPromise<GetApiV1CardsRandom200Response> {
            return localVarFp.getApiV1CardsRandom(limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List decks of current user
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1Decks(page?: number, perPage?: number, search?: string, options?: any): AxiosPromise<GetApiV1Decks200Response> {
            return localVarFp.getApiV1Decks(page, perPage, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get deck
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1DecksId(id: string, options?: any): AxiosPromise<PostApiV1Decks200Response> {
            return localVarFp.getApiV1DecksId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get reviewing cards
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiV1LearningsReviews(options?: any): AxiosPromise<GetApiV1Cards200Response> {
            return localVarFp.getApiV1LearningsReviews(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {PostApiV1AuthLoginRequest} [postApiV1AuthLoginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1AuthLogin(postApiV1AuthLoginRequest?: PostApiV1AuthLoginRequest, options?: any): AxiosPromise<GetApiV1AuthUser401Response> {
            return localVarFp.postApiV1AuthLogin(postApiV1AuthLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register new user
         * @param {PostApiV1AuthSignupRequest} [postApiV1AuthSignupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1AuthSignup(postApiV1AuthSignupRequest?: PostApiV1AuthSignupRequest, options?: any): AxiosPromise<GetApiV1AuthUser401Response> {
            return localVarFp.postApiV1AuthSignup(postApiV1AuthSignupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create card
         * @param {string} [deckId] 
         * @param {PostApiV1CardsRequestContent} [content] 
         * @param {PostApiV1CardsRequestFields} [fields] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Cards(deckId?: string, content?: PostApiV1CardsRequestContent, fields?: PostApiV1CardsRequestFields, file?: File, options?: any): AxiosPromise<GetApiV1AuthUser401Response> {
            return localVarFp.postApiV1Cards(deckId, content, fields, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload card photo
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1CardsAttachments(file?: File, options?: any): AxiosPromise<GetApiV1AuthUser401Response> {
            return localVarFp.postApiV1CardsAttachments(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add learning
         * @param {PostApiV1CardsLearningRequest} [postApiV1CardsLearningRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1CardsLearning(postApiV1CardsLearningRequest?: PostApiV1CardsLearningRequest, options?: any): AxiosPromise<PostApiV1CardsLearning200Response> {
            return localVarFp.postApiV1CardsLearning(postApiV1CardsLearningRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create deck
         * @param {string} name 
         * @param {string} [description] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiV1Decks(name: string, description?: string, file?: File, options?: any): AxiosPromise<PostApiV1Decks200Response> {
            return localVarFp.postApiV1Decks(name, description, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update card
         * @param {string} id 
         * @param {PutApiV1CardsIdRequestContent} [content] 
         * @param {PutApiV1CardsIdRequestFields} [fields] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1CardsId(id: string, content?: PutApiV1CardsIdRequestContent, fields?: PutApiV1CardsIdRequestFields, file?: File, options?: any): AxiosPromise<GetApiV1AuthUser401Response> {
            return localVarFp.putApiV1CardsId(id, content, fields, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update learnings
         * @param {PutApiV1CardsLearningRequest} [putApiV1CardsLearningRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1CardsLearning(putApiV1CardsLearningRequest?: PutApiV1CardsLearningRequest, options?: any): AxiosPromise<PutApiV1CardsLearning200Response> {
            return localVarFp.putApiV1CardsLearning(putApiV1CardsLearningRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update deck
         * @param {string} id 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiV1DecksId(id: string, name?: string, description?: string, file?: File, options?: any): AxiosPromise<PostApiV1Decks200Response> {
            return localVarFp.putApiV1DecksId(id, name, description, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteApiV1AuthLogout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteApiV1AuthLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete card
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteApiV1CardsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteApiV1CardsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete deck
     * @param {string} id 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteApiV1DecksId(id: string, body?: object, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteApiV1DecksId(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiV1AuthUser(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiV1AuthUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get cards list
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiV1Cards(page?: number, perPage?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiV1Cards(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Card detail
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiV1CardsId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiV1CardsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get learning cards
     * @param {string} [deckId] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiV1CardsLearning(deckId?: string, limit?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiV1CardsLearning(deckId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get random cards
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiV1CardsRandom(limit?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiV1CardsRandom(limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List decks of current user
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiV1Decks(page?: number, perPage?: number, search?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiV1Decks(page, perPage, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get deck
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiV1DecksId(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiV1DecksId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get reviewing cards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getApiV1LearningsReviews(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getApiV1LearningsReviews(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {PostApiV1AuthLoginRequest} [postApiV1AuthLoginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiV1AuthLogin(postApiV1AuthLoginRequest?: PostApiV1AuthLoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiV1AuthLogin(postApiV1AuthLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register new user
     * @param {PostApiV1AuthSignupRequest} [postApiV1AuthSignupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiV1AuthSignup(postApiV1AuthSignupRequest?: PostApiV1AuthSignupRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiV1AuthSignup(postApiV1AuthSignupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create card
     * @param {string} [deckId] 
     * @param {PostApiV1CardsRequestContent} [content] 
     * @param {PostApiV1CardsRequestFields} [fields] 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiV1Cards(deckId?: string, content?: PostApiV1CardsRequestContent, fields?: PostApiV1CardsRequestFields, file?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiV1Cards(deckId, content, fields, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload card photo
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiV1CardsAttachments(file?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiV1CardsAttachments(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add learning
     * @param {PostApiV1CardsLearningRequest} [postApiV1CardsLearningRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiV1CardsLearning(postApiV1CardsLearningRequest?: PostApiV1CardsLearningRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiV1CardsLearning(postApiV1CardsLearningRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create deck
     * @param {string} name 
     * @param {string} [description] 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postApiV1Decks(name: string, description?: string, file?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postApiV1Decks(name, description, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update card
     * @param {string} id 
     * @param {PutApiV1CardsIdRequestContent} [content] 
     * @param {PutApiV1CardsIdRequestFields} [fields] 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putApiV1CardsId(id: string, content?: PutApiV1CardsIdRequestContent, fields?: PutApiV1CardsIdRequestFields, file?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putApiV1CardsId(id, content, fields, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update learnings
     * @param {PutApiV1CardsLearningRequest} [putApiV1CardsLearningRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putApiV1CardsLearning(putApiV1CardsLearningRequest?: PutApiV1CardsLearningRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putApiV1CardsLearning(putApiV1CardsLearningRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update deck
     * @param {string} id 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putApiV1DecksId(id: string, name?: string, description?: string, file?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putApiV1DecksId(id, name, description, file, options).then((request) => request(this.axios, this.basePath));
    }
}



